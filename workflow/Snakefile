import glob
import os
from snakemake.utils import min_version
min_version("6.12")

configfile: f"{workflow.basedir}/../config/config.yaml"
configfile: f"{workflow.basedir}/../config/methods.yaml"

include: "rules/parse_config.smk"
include: "rules/common.smk"
include: "rules/io.smk"
include: "rules/core.smk"
include: "rules/too_many_cells.smk"
include: "rules/plot.smk"

localrules: create_all_conda_envs, create_conda_env

wildcard_constraints:
    # A can be anything that doesn't contain a 
    # '\', '.',  '/', or a whitespace
    filter_method = get_wc_constraint('filter') + "|tmc",
    norm_method = get_wc_constraint('norm') + "|tmc",
    dr_method = get_wc_constraint('dim_reduce'),
    c_method = get_wc_constraint('cluster'),
    prior = "[^\\/\.\s]*",
    maketree = "[^\\/\.\s]*",
    sample = "[^\\/\.\s]*",
    params = "[^\\/\s]*"

onstart:
    if not os.path.exists(config['output_dir']):
        os.mkdir(config['output_dir'])


rule all:
    input:
        get_final_output()


rule create_all_conda_envs:
    input:
        "cluster_env.done",
        "dim_reduce_env.done",
        "plot_env.done",
        "io_env.done",
        "filter_env.done",
        "norm_env.done",
        "differential_env.done"


rule create_conda_env:
    output:
        temp("{basename}_env.done")
    conda:
        "envs/{basename}.yaml"
    shell:
        (
            "touch {wildcards.basename}_env.done"
            "echo \"Finished creating {wildcards.basename} environment\""
        )
